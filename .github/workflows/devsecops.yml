name: Build Step

on:
  push:
    branches: ['main']
#   pull_request:
#     branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.16.0]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm install
      - run: npm run build --if-present

  depchecktest:
    runs-on: ubuntu-latest
    needs: build
    name: depecheck_test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'test'
          path: '.'
          format: 'XML'
          out: 'dependency-check-report.xml' # this is the default, no need to specify unless you wish to override it
          args: >
            #--failOnCVSS 9
            --enableRetired
      - name: Upload results to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: dependency-check-report.xml

      - name: Publish report
        id: import-scan
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: c651bb5dc6209fb0cf8c9527dae5cbe784129ec0
          defectdojo_url: http://54.210.173.4:8080/
          file: dependency-check-report.xml
          scan_type: Dependency Check Scan
          engagement: 2
      - name: Show response
        run: |
          set -e
          printf '%s\n' '${{ steps.import-scan.outputs.response }}'

  test-stage:
    runs-on: ubuntu-latest
    needs: ['build', depchecktest]
    steps:
      - name: Running Tests
        uses: actions/checkout@v3
      - run: echo "runnigngngngngn"

  build-docker-image:
    name: Build Docker image and push to repositories
    # run only when code is compiling and tests are passing
    runs-on: ubuntu-latest
    needs: ['build', 'test-stage', depchecktest]

    # steps to perform in job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # setup Docker build action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.G_TOKEN }}

      - name: Build and load
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: vijaygawate/bluegreen

  Docker-image-scan:
    runs-on: ubuntu-latest
    needs: ['build', 'build-docker-image', 'test-stage', depchecktest]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/vijaygawate/bluegreen'
          format: 'json'
          output: 'trivy-results.json'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - name: Upload results to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: trivy-results
          path: trivy-results.json
       
      - name: Publish report
        id: import-scan
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: c651bb5dc6209fb0cf8c9527dae5cbe784129ec0
          defectdojo_url: http://54.210.173.4:8080/
          file: trivy-results.json
          scan_type: Trivy Scan
          engagement: 1
      - name: Show response
        run: |
          set -e
          printf '%s\n' '${{ steps.import-scan.outputs.response }}'

  Push-Docker-Image-To-DockerHub:
    runs-on: ubuntu-latest
    needs: ['build', 'build-docker-image', 'test-stage', 'depchecktest', 'Docker-image-scan']
    steps:
      - name: Build and load
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: vijaygawate/bluegreen
   
  
  # zap_scan:
  #   runs-on: ubuntu-latest
  #   name: Scan the webapplication
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         ref: main
  #     - name: ZAP Scan
  #       uses: zaproxy/action-full-scan@v0.7.0
  #       with:
  #         token: ${{ secrets.G_TOKEN }}
  #         docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
  #         target: 'http://52.91.150.100:8080/'
  #         rules_file_name: '.zap/rules.tsv'
  #         cmd_options: '-a'
